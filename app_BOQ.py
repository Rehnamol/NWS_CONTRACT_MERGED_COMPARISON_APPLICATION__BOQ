{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c0176956-6c18-4f0c-b99d-a92e05b718a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Updated BoQ Comparator ‚Äì Streamlit Web App\n",
    "# -------------------------------------------------------------\n",
    "# This update ensures merged contractor columns are standardized as\n",
    "# Contractor_1, Contractor_2, etc. for clarity.\n",
    "# -------------------------------------------------------------\n",
    "\n",
    "from __future__ import annotations\n",
    "import io\n",
    "from io import BytesIO\n",
    "from typing import List, Tuple\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import streamlit as st\n",
    "\n",
    "st.set_page_config(page_title=\"BoQ Comparator\", layout=\"wide\")\n",
    "st.title(\"üìä BoQ Comparator ‚Äì Merge & Compare Contractors' Quotations\")\n",
    "\n",
    "st.markdown(\"Upload 2 or more contractor quotations (Excel/CSV) to merge and compare.\")\n",
    "\n",
    "uploads = st.file_uploader(\"Upload files\", type=[\"xlsx\", \"xls\", \"csv\"], accept_multiple_files=True)\n",
    "\n",
    "match_mode = st.selectbox(\"Match items by\", [\"ITEM + DESCRIPTION\", \"DESCRIPTION only\", \"ITEM only\"], index=0)\n",
    "\n",
    "run = st.button(\"üîç Compare Quotations\", type=\"primary\", disabled=not uploads or len(uploads) < 2)\n",
    "\n",
    "def normalize_name(idx: int) -> str:\n",
    "    return f\"Contractor_{idx}\"\n",
    "\n",
    "def load_table(file) -> pd.DataFrame:\n",
    "    if file.name.lower().endswith(\".csv\"):\n",
    "        df = pd.read_csv(file)\n",
    "    else:\n",
    "        df = pd.read_excel(file)\n",
    "    return df\n",
    "\n",
    "def merge_contractors(files: List, mode: str) -> pd.DataFrame:\n",
    "    frames = []\n",
    "    for i, f in enumerate(files, start=1):\n",
    "        df = load_table(f)\n",
    "        contractor_name = normalize_name(i)\n",
    "        # ensure columns exist\n",
    "        if \"RATE\" not in df.columns:\n",
    "            for c in df.columns:\n",
    "                if \"rate\" in c.lower():\n",
    "                    df.rename(columns={c: \"RATE\"}, inplace=True)\n",
    "        rename_map = {}\n",
    "        if \"RATE\" in df.columns:\n",
    "            rename_map[\"RATE\"] = f\"{contractor_name}_RATE\"\n",
    "        if \"AMOUNT\" in df.columns:\n",
    "            rename_map[\"AMOUNT\"] = f\"{contractor_name}_AMOUNT\"\n",
    "        df = df.rename(columns=rename_map)\n",
    "        frames.append(df)\n",
    "    combined = frames[0]\n",
    "    for part in frames[1:]:\n",
    "        if mode == \"ITEM + DESCRIPTION\":\n",
    "            keys = [k for k in (\"ITEM\", \"DESCRIPTION\") if k in combined.columns and k in part.columns]\n",
    "        elif mode == \"DESCRIPTION only\":\n",
    "            keys = [\"DESCRIPTION\"] if \"DESCRIPTION\" in combined.columns and \"DESCRIPTION\" in part.columns else []\n",
    "        else:\n",
    "            keys = [\"ITEM\"] if \"ITEM\" in combined.columns and \"ITEM\" in part.columns else []\n",
    "        combined = pd.merge(combined, part, on=keys, how=\"outer\")\n",
    "    return combined\n",
    "\n",
    "if run:\n",
    "    result = merge_contractors(uploads, match_mode)\n",
    "    st.dataframe(result, use_container_width=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c2bd28d6-921c-4a31-84e9-5aaa432f90da",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
